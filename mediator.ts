// Mediator who has universal interfaceinterface Mediator {  send(message: string, colleague: Colleague);}// Class which is used for communicationclass ConcreteMediator implements Mediator {  public concreteColleagueA: ConcreteColleagueA;  public concreteColleagueB: ConcreteColleagueB;  public send(message: string, colleague: Colleague): void {    if (this.concreteColleagueA === colleague) {      this.concreteColleagueB.receive(message);    } else {      this.concreteColleagueA.receive(message);    }  }}// Abstract for co-workersabstract class Colleague {  public mediator: Mediator;  constructor(mediator: Mediator) {    this.mediator = mediator;  }  public send(message: string): void {}  public receive(message: string): void {}}// First co-worker who can communicate using mediatorclass ConcreteColleagueA extends Colleague {  constructor(mediator: Mediator) {    super(mediator);  }  public send(message: string): void {    this.mediator.send(message, this);  }  public receive(message: string): void {    console.log(message, "Received a message! ColleagueA!");  }}// Second co-worker who can communicate using mediatiorclass ConcreteColleagueB extends Colleague {  constructor(mediator: Mediator) {    super(mediator);  }  public send(message: string): void {    this.mediator.send(message, this);  }  public receive(msg: string): void {    console.log(msg, "Received a message! ColleagueB!");  }}// How to use:const mediator: ConcreteMediator = new ConcreteMediator();const colleague1: ConcreteColleagueA = new ConcreteColleagueA(mediator);const colleague2: ConcreteColleagueB = new ConcreteColleagueB(mediator);mediator.concreteColleagueA = colleague1;mediator.concreteColleagueB = colleague2;colleague1.send('Hi hi');colleague2.send('Elo elo');