interface BellState {  ring();}// Concrete statesclass BellRingingState implements BellState {  ring() {    console.log('ring ring ring!');  }}class BellSilentState implements BellState {  ring() {    console.log('shhh...');  }}// this class has different statesclass BellContext {  private currentState: BellState;  constructor(state: BellState) {    this.currentState = state;  }  setState(state: BellState) {    this.currentState = state;  }  alert() {    this.currentState.ring();  }}// How to useconst bellContext = new BellContext(new BellRingingState());bellContext.alert();bellContext.alert();bellContext.setState(new BellSilentState());bellContext.alert();bellContext.alert();bellContext.setState(new BellRingingState());bellContext.alert();// Second test:class MyTestBell {  isSilent: boolean = false;  alert() {    if (this.isSilent) {      console.log('shhh...');    } else {      console.log('ring ring ring!');    }  }}const testBell: MyTestBell = new MyTestBell();testBell.alert();testBell.isSilent = true;testBell.alert();