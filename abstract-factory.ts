// ================= First group =================// Main interfaceinterface Chocolate {  displayColor();}// First classclass WhiteChocolate implements Chocolate {  displayColor() {    console.log('White color!');  }}// Second classclass DarkChocolate implements Chocolate {  displayColor() {    console.log('Dark color!');  }}// ================= Second group =================// Main interfaceinterface ChocolateWorker {  introduceYourself(): void;}class WhiteChocolateWorker implements ChocolateWorker {  introduceYourself(): void {    console.log('Hello I am Fred!');  }}class DarkChocolateWorker implements ChocolateWorker {  introduceYourself(): void {    console.log('Hello I am John!');  }}// ================= Factory =================// Main fabrykaabstract class ChocolateFactory {  abstract getAChocolate(): Chocolate;  abstract assignWorker(): ChocolateWorker;}// Factory of the first two classesclass WhiteChocolateFactory extends ChocolateFactory {  getAChocolate(): Chocolate {    return new WhiteChocolate();  }  assignWorker(): ChocolateWorker {    return new WhiteChocolateWorker();  }}// Factory of the two another classesclass DarkChocolateFactory extends ChocolateFactory {  getAChocolate(): Chocolate {    return new DarkChocolate();  }  assignWorker(): ChocolateWorker {    return new DarkChocolateWorker();  }}// Main class where the factories are createdclass ChocolateFactoryConstruction {  private chocolateFactory: ChocolateFactory;  constructor(chocolateFactory: ChocolateFactory) {    this.chocolateFactory = chocolateFactory;  }  makeAChocolate() {    const makehocolate = this.chocolateFactory.getAChocolate();    const workers = this.chocolateFactory.assignWorker();    console.log('Zaczeto produkcje czekolady i przypisano pracownikow!');    makehocolate.displayColor();    workers.introduceYourself();  }}// How to use:let chocolateFactoryConstruction: ChocolateFactoryConstruction;chocolateFactoryConstruction = new ChocolateFactoryConstruction(new WhiteChocolateFactory());chocolateFactoryConstruction.makeAChocolate();chocolateFactoryConstruction = new ChocolateFactoryConstruction(new DarkChocolateFactory());chocolateFactoryConstruction.makeAChocolate();