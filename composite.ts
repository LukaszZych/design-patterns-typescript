// Componentexport interface Component {  operation(): void;}// Leafexport class Leaf implements Component {  private name: string;  constructor(name: string) {    this.name = name;  }  public operation(): void {    console.log(`Leaf: ${this.name}`);  }}// Compositeexport class Composite implements Component {  private list: Component[];  private name: string;  constructor(name: string) {    this.list = [];    this.name = name;  }  public operation(): void {    console.log(`Higher component: ${this.name}`);    for (const leaf of this.list) {      leaf.operation();    }  }  public add(c: Component): void {    this.list.push(c);  }  public remove(component: Component): void {    this.list = this.list.filter((value) => {      return value !== component;    });  }}// How to use:const leaf1 = new Leaf('F');const leaf2 = new Leaf('U');const leaf3 = new Leaf('B');const composite = new Composite('test');composite.add(leaf1);composite.add(leaf2);composite.add(leaf3);composite.operation();composite.remove(leaf2);composite.operation();