// It keepts last saved stateclass Memento {  private state: string;  constructor(state: string) {    this.state = state;  }  getState(): string {    return this.state;  }}// Adds and returns a stateclass Caretaker {  private mementos: Memento[] = [];  addMemento(memento: Memento) {    this.mementos = [...this.mementos, memento];  }  getMemento(index: number) {    return this.mementos[index];  }}// Main class which can save and restore it's stateclass Originator {  private state: string;  setState(state: string): void {    this.state = state;  }  save(): Memento {    console.log('Zapisuje stan: ', this.state);    return new Memento(this.state);  }  restore(memento: Memento): void {    console.log('Przywracam stan: ', memento.getState());    this.state = memento.getState();  }}// How to use:const keeper = new Caretaker();const source = new Originator();source.setState('Fred');source.setState('John');keeper.addMemento(source.save());source.setState('Rysiu');keeper.addMemento(source.save());source.setState('Bozydar');source.restore(keeper.getMemento(0));